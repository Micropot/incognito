{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"api/","text":"API Text anonymization module Anonymizer Anonymization class based on strategies formating Source code in incognito_anonymizer/anonymizer.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 class Anonymizer : \"\"\"Anonymization class based on strategies formating\"\"\" # available strategies STRATEGIES = { \"regex\" : analyzer . RegexStrategy (), \"pii\" : analyzer . PiiStrategy (), } # available masks MASKS = { \"placeholder\" : mask . PlaceholderStrategy (), \"fake\" : mask . FakeStrategy (), \"hash\" : mask . HashStrategy (), \"hide\" : mask . HideStrategy (), } def __init__ ( self ): self . infos = None self . position = [] def open_text_file ( self , path : str ) -> str : \"\"\" Open input txt file :param path: path of the input txt file :returns: file content :raises FileExistsError: if given file not found \"\"\" try : with open ( path , \"r\" ) as f : content = f . read () return content except FileNotFoundError as e : print ( e ) raise def open_json_file ( self , path : str ) -> str : \"\"\" Open input json file for personal infos :param path: path of the json file :returns: file content :raises FileExistsError: if given file not found \"\"\" try : with open ( path , \"r\" ) as f : data = json . load ( f ) return data except FileNotFoundError as e : print ( e ) raise def set_info ( self , infos : dict ) -> analyzer . PersonalInfo : \"\"\" Set dict to PersonalInfo Class :param infos: dict with all the Personal info values \"\"\" self . infos = analyzer . PersonalInfo ( ** infos ) return self . infos def set_strategies ( self , strategies : list ): \"\"\" Set strategies :param list: list of wanted strategies \"\"\" self . used_strats = strategies def set_masks ( self , mask : str ): \"\"\" Set masks :param mask: wanted mask \"\"\" self . used_mask = mask def anonymize ( self , text : str ) -> str : \"\"\" Global function to anonymise a text base on the choosen strategies :param text: text to anonymize :returns: anonimized text \"\"\" spans = {} for strategy in self . used_strats : current_strategy = Anonymizer . STRATEGIES . get ( strategy ) current_strategy . info = self . infos span = current_strategy . analyze ( text = text ) spans . update ( span ) current_mask = Anonymizer . MASKS . get ( self . used_mask ) anonymized_text = current_mask . mask ( text , spans ) text = anonymized_text spans = {} return anonymized_text anonymize ( text ) Global function to anonymise a text base on the choosen strategies :param text: text to anonymize :returns: anonimized text Source code in incognito_anonymizer/anonymizer.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 def anonymize ( self , text : str ) -> str : \"\"\" Global function to anonymise a text base on the choosen strategies :param text: text to anonymize :returns: anonimized text \"\"\" spans = {} for strategy in self . used_strats : current_strategy = Anonymizer . STRATEGIES . get ( strategy ) current_strategy . info = self . infos span = current_strategy . analyze ( text = text ) spans . update ( span ) current_mask = Anonymizer . MASKS . get ( self . used_mask ) anonymized_text = current_mask . mask ( text , spans ) text = anonymized_text spans = {} return anonymized_text open_json_file ( path ) Open input json file for personal infos :param path: path of the json file :returns: file content :raises FileExistsError: if given file not found Source code in incognito_anonymizer/anonymizer.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 def open_json_file ( self , path : str ) -> str : \"\"\" Open input json file for personal infos :param path: path of the json file :returns: file content :raises FileExistsError: if given file not found \"\"\" try : with open ( path , \"r\" ) as f : data = json . load ( f ) return data except FileNotFoundError as e : print ( e ) raise open_text_file ( path ) Open input txt file :param path: path of the input txt file :returns: file content :raises FileExistsError: if given file not found Source code in incognito_anonymizer/anonymizer.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 def open_text_file ( self , path : str ) -> str : \"\"\" Open input txt file :param path: path of the input txt file :returns: file content :raises FileExistsError: if given file not found \"\"\" try : with open ( path , \"r\" ) as f : content = f . read () return content except FileNotFoundError as e : print ( e ) raise set_info ( infos ) Set dict to PersonalInfo Class :param infos: dict with all the Personal info values Source code in incognito_anonymizer/anonymizer.py 65 66 67 68 69 70 71 72 def set_info ( self , infos : dict ) -> analyzer . PersonalInfo : \"\"\" Set dict to PersonalInfo Class :param infos: dict with all the Personal info values \"\"\" self . infos = analyzer . PersonalInfo ( ** infos ) return self . infos set_masks ( mask ) Set masks :param mask: wanted mask Source code in incognito_anonymizer/anonymizer.py 82 83 84 85 86 87 88 def set_masks ( self , mask : str ): \"\"\" Set masks :param mask: wanted mask \"\"\" self . used_mask = mask set_strategies ( strategies ) Set strategies :param list: list of wanted strategies Source code in incognito_anonymizer/anonymizer.py 74 75 76 77 78 79 80 def set_strategies ( self , strategies : list ): \"\"\" Set strategies :param list: list of wanted strategies \"\"\" self . used_strats = strategies","title":"API"},{"location":"api/#api","text":"Text anonymization module","title":"API"},{"location":"api/#incognito_anonymizer.anonymizer.Anonymizer","text":"Anonymization class based on strategies formating Source code in incognito_anonymizer/anonymizer.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 class Anonymizer : \"\"\"Anonymization class based on strategies formating\"\"\" # available strategies STRATEGIES = { \"regex\" : analyzer . RegexStrategy (), \"pii\" : analyzer . PiiStrategy (), } # available masks MASKS = { \"placeholder\" : mask . PlaceholderStrategy (), \"fake\" : mask . FakeStrategy (), \"hash\" : mask . HashStrategy (), \"hide\" : mask . HideStrategy (), } def __init__ ( self ): self . infos = None self . position = [] def open_text_file ( self , path : str ) -> str : \"\"\" Open input txt file :param path: path of the input txt file :returns: file content :raises FileExistsError: if given file not found \"\"\" try : with open ( path , \"r\" ) as f : content = f . read () return content except FileNotFoundError as e : print ( e ) raise def open_json_file ( self , path : str ) -> str : \"\"\" Open input json file for personal infos :param path: path of the json file :returns: file content :raises FileExistsError: if given file not found \"\"\" try : with open ( path , \"r\" ) as f : data = json . load ( f ) return data except FileNotFoundError as e : print ( e ) raise def set_info ( self , infos : dict ) -> analyzer . PersonalInfo : \"\"\" Set dict to PersonalInfo Class :param infos: dict with all the Personal info values \"\"\" self . infos = analyzer . PersonalInfo ( ** infos ) return self . infos def set_strategies ( self , strategies : list ): \"\"\" Set strategies :param list: list of wanted strategies \"\"\" self . used_strats = strategies def set_masks ( self , mask : str ): \"\"\" Set masks :param mask: wanted mask \"\"\" self . used_mask = mask def anonymize ( self , text : str ) -> str : \"\"\" Global function to anonymise a text base on the choosen strategies :param text: text to anonymize :returns: anonimized text \"\"\" spans = {} for strategy in self . used_strats : current_strategy = Anonymizer . STRATEGIES . get ( strategy ) current_strategy . info = self . infos span = current_strategy . analyze ( text = text ) spans . update ( span ) current_mask = Anonymizer . MASKS . get ( self . used_mask ) anonymized_text = current_mask . mask ( text , spans ) text = anonymized_text spans = {} return anonymized_text","title":"Anonymizer"},{"location":"api/#incognito_anonymizer.anonymizer.Anonymizer.anonymize","text":"Global function to anonymise a text base on the choosen strategies :param text: text to anonymize :returns: anonimized text Source code in incognito_anonymizer/anonymizer.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 def anonymize ( self , text : str ) -> str : \"\"\" Global function to anonymise a text base on the choosen strategies :param text: text to anonymize :returns: anonimized text \"\"\" spans = {} for strategy in self . used_strats : current_strategy = Anonymizer . STRATEGIES . get ( strategy ) current_strategy . info = self . infos span = current_strategy . analyze ( text = text ) spans . update ( span ) current_mask = Anonymizer . MASKS . get ( self . used_mask ) anonymized_text = current_mask . mask ( text , spans ) text = anonymized_text spans = {} return anonymized_text","title":"anonymize"},{"location":"api/#incognito_anonymizer.anonymizer.Anonymizer.open_json_file","text":"Open input json file for personal infos :param path: path of the json file :returns: file content :raises FileExistsError: if given file not found Source code in incognito_anonymizer/anonymizer.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 def open_json_file ( self , path : str ) -> str : \"\"\" Open input json file for personal infos :param path: path of the json file :returns: file content :raises FileExistsError: if given file not found \"\"\" try : with open ( path , \"r\" ) as f : data = json . load ( f ) return data except FileNotFoundError as e : print ( e ) raise","title":"open_json_file"},{"location":"api/#incognito_anonymizer.anonymizer.Anonymizer.open_text_file","text":"Open input txt file :param path: path of the input txt file :returns: file content :raises FileExistsError: if given file not found Source code in incognito_anonymizer/anonymizer.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 def open_text_file ( self , path : str ) -> str : \"\"\" Open input txt file :param path: path of the input txt file :returns: file content :raises FileExistsError: if given file not found \"\"\" try : with open ( path , \"r\" ) as f : content = f . read () return content except FileNotFoundError as e : print ( e ) raise","title":"open_text_file"},{"location":"api/#incognito_anonymizer.anonymizer.Anonymizer.set_info","text":"Set dict to PersonalInfo Class :param infos: dict with all the Personal info values Source code in incognito_anonymizer/anonymizer.py 65 66 67 68 69 70 71 72 def set_info ( self , infos : dict ) -> analyzer . PersonalInfo : \"\"\" Set dict to PersonalInfo Class :param infos: dict with all the Personal info values \"\"\" self . infos = analyzer . PersonalInfo ( ** infos ) return self . infos","title":"set_info"},{"location":"api/#incognito_anonymizer.anonymizer.Anonymizer.set_masks","text":"Set masks :param mask: wanted mask Source code in incognito_anonymizer/anonymizer.py 82 83 84 85 86 87 88 def set_masks ( self , mask : str ): \"\"\" Set masks :param mask: wanted mask \"\"\" self . used_mask = mask","title":"set_masks"},{"location":"api/#incognito_anonymizer.anonymizer.Anonymizer.set_strategies","text":"Set strategies :param list: list of wanted strategies Source code in incognito_anonymizer/anonymizer.py 74 75 76 77 78 79 80 def set_strategies ( self , strategies : list ): \"\"\" Set strategies :param list: list of wanted strategies \"\"\" self . used_strats = strategies","title":"set_strategies"}]}